services:
  redis:
    image: redis:7.0-alpine
    container_name: redis2
    command: redis-server --appendonly yes --replica-read-only no
    volumes:
      - redis_data:/data
    networks:
      - mks
    restart: unless-stopped

  db:
    image: postgres:13
    container_name: postgres_db
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - mks
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    ports:
      - 8080:8080 
    # command: uvicorn --host 0.0.0.0 --port 8080 easymed.asgi:application

    env_file:
      - .env
    depends_on:
      - db
      - redis
    restart: unless-stopped
    networks:
      - mks

  worker:
    build: ./backend
    container_name: worker
    command: celery -A easymed worker --loglevel=INFO
    env_file:
      - .env
    depends_on:
      - backend
      - redis
    networks:
      - mks
    restart: unless-stopped

  frontend:
    build:
      context: ./front-end
      dockerfile: Dockerfile
    container_name: front-end
    ports:
      - "3000:3000"
    env_file:
      - .env
    depends_on:
      - backend
    networks:
      - mks
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      # - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - mks
    restart: unless-stopped

networks:
  mks:
    name: mks
    driver: bridge

volumes:
  postgres_data:
  redis_data: