events {

    worker_connections 1024;

}



http {

    include       /etc/nginx/mime.types;

    default_type  application/octet-stream;



    upstream frontend {

        server frontend:3000;

    }



    upstream backend {

        server backend:8080;

    }



    server {

        listen 80;

        server_name 34.35.168.156;



        # Enable gzip compression

        gzip on;

        gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;



        # Global CORS headers

        add_header 'Access-Control-Allow-Origin' '*' always;

        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, PATCH' always;

        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;

        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;



        # Debug headers

        add_header X-Debug-Request-URI $request_uri;

        add_header X-Debug-Upstream $upstream_addr;



        # Frontend

        location / {

            proxy_pass http://frontend;

            proxy_http_version 1.1;

            proxy_set_header Upgrade $http_upgrade;

            proxy_set_header Connection 'upgrade';

            proxy_set_header Host $host;

            proxy_set_header X-Real-IP $remote_addr;

            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_cache_bypass $http_upgrade;



            # CORS preflight

            if ($request_method = 'OPTIONS') {

                add_header 'Access-Control-Max-Age' 1728000;

                add_header 'Content-Type' 'text/plain charset=UTF-8';

                add_header 'Content-Length' 0;

                return 204;

            }

        }



        # API routes

        location /api/ {

            proxy_pass http://backend;  # Don't add /api/ here

            proxy_http_version 1.1;

            proxy_set_header Upgrade $http_upgrade;

            proxy_set_header Connection 'upgrade';

            proxy_set_header Host $host;

            proxy_set_header X-Real-IP $remote_addr;

            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            proxy_set_header X-Forwarded-Proto $scheme;

            

            # Increase timeouts

            proxy_connect_timeout 60s;

            proxy_send_timeout 60s;

            proxy_read_timeout 60s;



            # Debug logging

            error_log /var/log/nginx/api_debug.log debug;

            access_log /var/log/nginx/api_access.log combined;

        }



        # Admin interface

        location /admin/ {

            proxy_pass http://backend;

            proxy_set_header Host $host;

            proxy_set_header X-Real-IP $remote_addr;

            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            proxy_set_header X-Forwarded-Proto $scheme;

        }



        # Static files

        location /static/ {

            proxy_pass http://backend;

            expires 30d;

            access_log off;

            add_header Cache-Control "public, no-transform";

        }



        # Media files

        location /media/ {

            proxy_pass http://backend;

            expires 30d;

            access_log off;

            add_header Cache-Control "public, no-transform";

        }



        # Security headers

        add_header X-Frame-Options "SAMEORIGIN" always;

        add_header X-XSS-Protection "1; mode=block" always;

        add_header X-Content-Type-Options "nosniff" always;

        add_header Referrer-Policy "no-referrer-when-downgrade" always;

        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

    }

} services:

  redis:

    image: redis:7.0-alpine

    container_name: redis2

    command: redis-server --appendonly yes --replica-read-only no

    volumes:

      - redis_data:/data

    networks:

      - mks

    restart: unless-stopped



  db:

    image: postgres:13

    container_name: postgres_db

    env_file:

      - .env

    volumes:

      - postgres_data:/var/lib/postgresql/data

    networks:

      - mks

    restart: unless-stopped



  backend:

    build:

      context: ./backend

      dockerfile: Dockerfile

    container_name: backend

    expose:

    - 8080 

    # command: uvicorn --host 0.0.0.0 --port 8080 easymed.asgi:application



    env_file:

      - .env

    depends_on:

      - db

      - redis

    restart: unless-stopped

    networks:

      - mks



  worker:

    build: ./backend

    container_name: worker

    command: celery -A easymed worker --loglevel=INFO

    env_file:

      - .env

    depends_on:

      - backend

      - redis

    networks:

      - mks

    restart: unless-stopped



  frontend:

    build:

      context: ./front-end

      dockerfile: Dockerfile

    container_name: front-end

    expose:

      - 3000  #

    env_file:

      - .env

    depends_on:

      - backend

    networks:

      - mks

    restart: unless-stopped



  nginx:

    image: nginx:alpine

    container_name: nginx

    ports:

      - "80:80"

      - "443:443"

    volumes:

      - ./nginx.conf:/etc/nginx/nginx.conf:ro

      - ./ssl:/etc/nginx/ssl:ro

    depends_on:

      - frontend

      - backend

    networks:

      - mks

    restart: unless-stopped



networks:

  mks:

    name: mks

    driver: bridge



volumes:

  postgres_data:

  redis_data: